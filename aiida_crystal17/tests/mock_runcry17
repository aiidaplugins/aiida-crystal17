#!/usr/bin/env python
"""
this is a mock version of runcry17,
which compares an input file to a hash and writes an appropriate outputfile st stdoout

to add find hashkeys:

input_path = 'path/to/input.d12'
with open(input_path, "rb") as f:
    hashkey = hashlib.md5(f.read()).digest()
hashkey

"""
import sys
import os
import hashlib
from shutil import copyfile
import aiida_crystal17.tests as tests

stdoutfiles = {
    '\xf6\t\x0e\x9f\r\xa6\t\x8ea,\xd2l\xb2\xf1\x16 ':
    "mgo_sto3g_scf.crystal.out",
    '\xffw\xb9\x96\xa5\x08\x1ed\xab.\x99p\xc6\xcd\x15\xcb':
    'mgo_sto3g_external.crystal.out',
}

additional_files = {
    '\xf6\t\x0e\x9f\r\xa6\t\x8ea,\xd2l\xb2\xf1\x16 ': [],
    '\xcexw\x0e\x91\x86i\xd0V\x13\xf4(\xfcsy\x1a': []
}

if __name__ == "__main__":

    # script_path = os.path.dirname(os.path.realpath(__file__))
    test_path = os.path.dirname(tests.__file__)
    input_path = sys.argv[1]
    # CRYSTAL17 requires input file name without extension
    input_path += ".d12"

    with open(input_path, "rb") as f:
        hashkey = hashlib.md5(f.read()).digest()

    if hashkey not in stdoutfiles:
        raise IOError("contents of {0} not in hash list, hashkey: {1}".format(
            os.path.basename(input_path), str(hashkey)))

    for inname, outname in additional_files.get(hashkey, []):
        src = os.path.join(test_path, "output_files", inname)
        dst = os.path.join(".", outname)
        copyfile(src, dst)

    outpath = os.path.join(test_path, "output_files", stdoutfiles[hashkey])
    with open(outpath) as f:
        sys.stdout.write(f.read())
