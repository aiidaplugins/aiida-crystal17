from collections import namedtuple
import numpy as np
import pytest

from aiida.orm import ArrayData, Float, List

from aiida_crystal17.common import recursive_round
from aiida_crystal17.calcfunctions.band_gap import calculate_band_gap, calcfunction_band_gap

TestData = namedtuple(
    'TestData', ['energies', 'densities', 'left_edge', 'right_edge', 'kwargs'])


def get_test_data(name):
    kwargs = {}

    if name == "zero":
        energies = np.linspace(-1.00, 1.00, num=100)
        densities = np.zeros(100, float)
        left_edge = right_edge = np.nan
    elif name == "non-zero":
        energies = np.linspace(-1.00, 1.00, num=100)
        densities = np.ones(100, float)
        left_edge = right_edge = np.nan
    elif name == "no-left":
        energies = np.linspace(-0.5, 0.5, num=100)
        densities = np.zeros(70, float).tolist() + np.ones(30, float).tolist()
        left_edge = np.nan
        right_edge = 0.20707070707070718
    elif name == "no-right":
        energies = np.linspace(-0.5, 0.5, num=100)
        densities = np.ones(30, float).tolist() + np.zeros(70, float).tolist()
        left_edge = -0.20707070707070707
        right_edge = np.nan
    elif name == "normal":
        # greigite_nm; normal band gap
        energies = np.linspace(-1.002, 2.996, num=400)
        densities = [
            374.346, 374.36, 373.652, 371.66, 368.126, 363.124, 357.028,
            349.56, 342.044, 337.428, 335.306, 334.062, 332.336, 329.138,
            323.922, 316.662, 307.916, 298.786, 290.678, 284.734, 280.042,
            270.84, 264.806, 263.674, 255.768, 239.256, 223.52, 228.19,
            235.822, 242.554, 248.178, 252.574, 255.718, 257.654, 258.476,
            258.304, 257.26, 255.454, 252.958, 249.802, 245.974, 241.412,
            236.028, 229.712, 222.348, 213.844, 204.146, 193.25, 181.227,
            168.223, 154.462, 140.245, 125.929, 111.914, 98.613, 86.425,
            75.701, 66.713, 59.632, 54.499, 51.221, 49.567, 49.184, 49.621,
            50.372, 50.922, 50.806, 49.667, 47.31, 43.741, 39.191, 34.101,
            29.079, 24.813, 21.95, 20.932, 21.835, 24.213, 27.025, 28.698,
            27.446, 21.988, 12.844, 4.469, 1.444, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.722, 3.826,
            5.93, 8.034, 10.138, 11.748, 12.502, 13.089, 13.556, 13.939,
            14.266, 14.563, 14.847, 15.132, 15.429, 15.743, 16.08, 16.441,
            16.827, 17.236, 17.668, 18.119, 18.586, 19.065, 19.553, 20.047,
            20.542, 21.035, 21.524, 22.005, 22.477, 22.937, 23.385, 23.818,
            24.237, 24.642, 25.032, 25.408, 25.771, 26.121, 26.461, 26.792,
            27.115, 27.433, 27.747, 28.06, 28.373, 28.689, 29.01, 29.337,
            29.672, 30.018, 30.376, 30.747, 31.133, 31.535, 31.954, 32.39,
            32.845, 33.318, 33.81, 34.32, 34.849, 35.396, 35.96, 36.541,
            37.137, 37.747, 38.37, 39.005, 39.649, 40.302, 40.962, 41.626,
            42.293, 42.961, 43.628, 44.291, 44.95, 45.602, 46.244, 46.876,
            47.495, 48.099, 48.688, 49.259, 49.811, 50.342, 50.852, 51.339,
            51.802, 52.241, 52.654, 53.042, 53.404, 53.739, 54.049, 54.332,
            54.589, 54.82, 55.027, 55.722, 56.405, 57.066, 57.705, 57.909,
            57.842, 57.636, 57.364, 57.079, 56.818, 56.607, 56.462, 56.39,
            56.392, 56.466, 56.604, 56.799, 57.039, 57.316, 57.617, 57.933,
            58.255, 58.573, 58.882, 59.175, 59.448, 59.699, 59.925, 60.127,
            60.305, 60.461, 60.599, 60.723, 60.836, 60.944, 61.052, 61.167,
            61.292, 61.436, 61.602, 61.798, 62.28, 62.884, 63.53, 64.222,
            64.846, 65.557, 66.338, 67.177, 68.063, 68.99, 69.953, 70.949,
            71.976, 73.032, 74.117, 75.23, 76.37, 77.537, 78.73, 79.947,
            81.188, 82.449, 83.729, 85.026, 86.335, 87.653, 88.978, 90.304,
            91.629, 92.947, 94.256, 95.549, 96.824, 98.077, 99.303, 100.499,
            101.662, 102.789, 103.876, 104.923, 105.926, 106.884, 107.797,
            108.663, 109.481, 110.252, 110.977, 111.656, 112.29, 112.881,
            113.43, 113.94, 114.412
        ]
        left_edge, right_edge = (-0.1603157894736842, 1.052110275689223)
    elif name == "left_approx_at_fermi":
        # pyrite_nm; the left edge starts at ~0.125 (fermi = 0)
        # before that the fermi dips to zero at ~0.05,
        # but then there is a small peak at 0.1
        energies = np.linspace(-1.002, 2.996, num=400)
        densities = [
            280.074, 274.898, 271.268, 269.488, 269.696, 271.894, 276.008,
            281.914, 289.45, 298.416, 308.544, 319.458, 330.628, 341.328,
            350.616, 357.352, 360.288, 358.224, 350.296, 336.372, 317.614,
            299.462, 283.944, 268.53, 255.48, 244.79, 236.726, 228.21, 209.49,
            205.076, 204.71, 204.392, 203.85, 202.858, 201.284, 199.115,
            196.466, 193.568, 190.696, 188.05, 185.54, 182.385, 173.48,
            168.086, 165.492, 162.07, 157.851, 152.892, 147.279, 141.116,
            134.53, 127.66, 120.654, 113.664, 106.838, 100.318, 94.232, 88.69,
            83.78, 79.565, 76.08, 73.331, 71.295, 69.921, 69.132, 68.828,
            68.89, 69.186, 69.576, 69.918, 70.074, 69.917, 69.337, 68.248,
            66.588, 64.33, 61.476, 58.064, 54.165, 49.883, 45.344, 40.698,
            36.107, 31.739, 27.755, 24.302, 21.501, 19.438, 18.153, 17.639,
            17.832, 18.613, 19.812, 21.213, 22.57, 23.621, 24.113, 23.829,
            22.611, 20.398, 17.249, 13.365, 9.101, 4.96, 1.555, 0.454, 0.484,
            1.792, 6.172, 11.561, 15.459, 11.824, 4.81, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.76, 9.8, 9.242, 7.811, 7.447,
            9.297, 12.947, 17.922, 23.703, 29.812, 35.861, 41.569, 46.769,
            51.394, 55.466, 59.069, 62.332, 65.406, 68.448, 71.604, 74.999,
            78.73, 82.855, 87.402, 92.361, 97.691, 103.325, 109.173, 115.133,
            121.093, 126.938, 132.561, 137.86, 142.748, 147.154, 151.024,
            154.326, 157.045, 159.184, 160.765, 161.823, 162.404, 162.564,
            162.363, 161.864, 161.129, 160.035, 157.858, 155.602, 155.437,
            157.624, 160.568, 163.44, 165.775, 169.145, 172.861, 175.849,
            176.959, 174.993, 171.538, 167.483, 163.462, 159.897, 157.037,
            154.994, 153.773, 153.303, 153.46
        ]
        kwargs['try_fshifts'] = (0.2, )
        left_edge = 0.1202456140350876
        right_edge = 2.32465664160401
    else:
        raise ValueError(name)

    return TestData(energies, densities, left_edge, right_edge, kwargs)


@pytest.mark.parametrize('dtype', ("zero", "non-zero", "no-left", "no-right",
                                   "normal", "left_approx_at_fermi"))
def test_band_gap(dtype):
    data = get_test_data(dtype)
    result = calculate_band_gap(
        data.energies, data.densities, missing_edge=np.nan, **data.kwargs)
    assert result.left_edge == pytest.approx(data.left_edge, nan_ok=True)
    assert result.right_edge == pytest.approx(data.right_edge, nan_ok=True)


def test_calcfunction_band_gap(db_test_app, data_regression):
    data = get_test_data("left_approx_at_fermi")
    array = ArrayData()
    array.set_array('energies', np.array(data.energies))
    array.set_array('total', np.array(data.densities))
    outputs, node = calcfunction_band_gap.run_get_node(
        doss_array=array,
        dtol=Float(1e-6),
        try_fshifts=List(list=[0.2]),
        metadata={'store_provenance': True})
    assert node.is_finished_ok, node.exit_status
    assert "results" in node.outputs
    data_regression.check(recursive_round(node.outputs.results.attributes, 4))


def test_calcfunction_band_gap_with_spin(db_test_app, data_regression):
    data = get_test_data("left_approx_at_fermi")
    array = ArrayData()
    array.set_array('energies', np.array(data.energies))
    array.set_array('total_alpha', np.array(data.densities))
    array.set_array('total_beta', np.array(data.densities))
    outputs, node = calcfunction_band_gap.run_get_node(
        doss_array=array,
        dtol=Float(1e-6),
        try_fshifts=List(list=[0.2]),
        metadata={'store_provenance': True})
    assert node.is_finished_ok, node.exit_status
    assert "results" in node.outputs
    data_regression.check(recursive_round(node.outputs.results.attributes, 4))
